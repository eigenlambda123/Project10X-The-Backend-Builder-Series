from django.test import TestCase
from django.utils import timezone
from shortener.serializers import ShortURLSerializer
from shortener.models import ShortURL
from datetime import timedelta

class ShortURLSerializerTest(TestCase):
    """
    """
    def setUp(self):
        self.valid_url = "https://example.com" # dummy url
        self.future_date = timezone.now() + timedelta(days=1) 
        self.past_date = timezone.now() - timedelta(days=1) 

    def test_valid_original_url_is_accepted(self):
        """
        Test for accepting valid url
        """
        serializer = ShortURLSerializer(data={"original_url": self.valid_url}) # serialize dummy url
        self.assertTrue(serializer.is_valid(), serializer.errors) # check if dummy url is valid

    def test_invalid_url_is_rejected(self):
        """
        Test if invalid url is rejected
        """
        invalid_url = "not-a-valid-url" # invalid dummy url
        serializer = ShortURLSerializer(data={"original_url": invalid_url}) # serialize invalid url
        self.assertFalse(serializer.is_valid()) # check if not valid
        self.assertIn("original_url", serializer.errors) # check if the error involves original_url

    def test_custom_short_code_must_be_unique(self):
        """
        Test for custom short code, custom short code created by the user must be unique 
        """
       
        ShortURL.objects.create(original_url=self.valid_url, short_code="custom123")  # Create a ShortURL with a specific short_code

        # Try to create another with the same short_code
        not_unique_short_code = ShortURLSerializer(data={
            "original_url": "https://another.com",
            "short_code": "custom123"
        })
        self.assertFalse(not_unique_short_code.is_valid()) # check if not_unique_short_code is not valid
        self.assertIn("short_code", not_unique_short_code.errors) # check if the error involves short_code


    def test_short_code_is_autogenerated_when_not_provided(self):
        """
        Test that short_code is autogenerated when not provided
        """
        serializer = ShortURLSerializer(data={"original_url": self.valid_url}) # serialize valid url without short_code
        self.assertTrue(serializer.is_valid()) # serializer should be valid
        instance = serializer.save() # save the instance
        self.assertTrue(instance.short_code) # check if short_code in autogenerated

    def test_expiration_date_is_optional(self):
        """
        Test that the expiration_date is optional
        """
        serializer = ShortURLSerializer(data={"original_url": self.valid_url}) # serialize valid url without expiration_date
        self.assertTrue(serializer.is_valid(), serializer.errors) # serializer shold be valid